# GitHub Actions workflow for creating Python sdist and wheels, uploading to
# PyPI, and deploying docs to GitHub Pages
# vim: set ts=8 sts=2 sw=2:
name: Release
on:
  push:
    tags:
      - v*.*.*

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - id: md4c-version
        name: Get compatible MD4C version
        uses: ./.github/actions/md4c-version
      - name: Fetch MD4C
        uses: actions/checkout@v3
        with:
          repository: mity/md4c
          ref: release-${{steps.md4c-version.outputs.md4c-version}}
          path: md4c-lib
      - name: Build and install MD4C
        run: |
          mkdir md4c-lib/build
          cd md4c-lib/build
          cmake ..
          make
          sudo make install
          sudo ldconfig
      - name: Install Python packaging tools
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Install PyMD4C with test dependencies
        run: python -m pip install .[test]
      - name: Check setup.py
        run: python setup.py check -m -s
      - name: Run flake8
        run: flake8 setup.py md4c/
      - name: Run Pytest
        run: pytest -vv test/

  package-sdist-docs:
    name: Package sdist and publish docs
    needs: test
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: md4c-version
        name: Get compatible MD4C version
        uses: ./.github/actions/md4c-version
      - name: Fetch MD4C
        uses: actions/checkout@v3
        with:
          repository: mity/md4c
          ref: release-${{steps.md4c-version.outputs.md4c-version}}
          path: md4c-lib
      - name: Build and install MD4C
        run: |
          mkdir md4c-lib/build
          cd md4c-lib/build
          cmake ..
          make
          sudo make install
          sudo ldconfig
      - name: Install Python packaging tools
        run: python3 -m pip install --upgrade pip setuptools wheel
      - name: Build sdist
        run: python3 setup.py sdist
      - name: List build artifacts
        run: ls dist/
      - name: Save sdist as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*
      - name: Build Sphinx docs
        run: |
          python3 -m pip install .
          python3 -m pip install --upgrade sphinx
          cd docs
          make html
      - name: Publish Sphinx docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: pymd4c.dcpx.org

  package-wheels:
    name: Package wheels on ${{matrix.os}}, arch ${{matrix.arch}}
    needs: test
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            arch: all
          - os: windows-2019
            arch: AMD64
            cmake-arch: x64
          - os: windows-2019
            arch: x86
            cmake-arch: Win32
          - os: windows-2019
            arch: ARM64
            cmake-arch: ARM64
          - os: macos-11
            arch: x86_64
            cmake-arch: x86_64
          - os: macos-11
            arch: universal2
            cmake-arch: arm64;x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: md4c-version
        name: Get compatible MD4C version
        uses: ./.github/actions/md4c-version
      - name: Fetch MD4C
        uses: actions/checkout@v3
        with:
          repository: mity/md4c
          ref: release-${{steps.md4c-version.outputs.md4c-version}}
          path: md4c-lib
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build MD4C and wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_ARCHS: ${{matrix.arch}}
          # Note: cmake3 is not available in yum repos for all archs, so we
          # install from PyPI instead.
          CIBW_BEFORE_ALL_LINUX: >
            pip install cmake &&
            mkdir md4c-lib/build &&
            cd md4c-lib/build &&
            cmake
            -DCMAKE_INSTALL_LIBDIR:PATH=/usr/local/lib
            -DCMAKE_BUILD_TYPE=Release .. &&
            make &&
            make install
          CIBW_ENVIRONMENT_WINDOWS: MD4C_PATH="C:\\MD4C"
          CIBW_BEFORE_ALL_WINDOWS: >
            mkdir md4c-lib\build &&
            cd md4c-lib\build &&
            cmake
            -A ${{matrix.cmake-arch}}
            -DCMAKE_INSTALL_PREFIX:PATH="C:\MD4C"
            -DCMAKE_BUILD_TYPE=Release .. &&
            cmake --build . --config Release &&
            cmake --install .
          # Note: CMAKE_INSTALL_NAME_DIR must be the path to where the
          # dylibs are installed. By default, this is
          # CMAKE_INSTALL_PREFIX/CMAKE_INSTALL_LIBDIR, which is /usr/local/lib
          # by default (see CMAKE docs for those vars).
          CIBW_BEFORE_ALL_MACOS: >
            mkdir md4c-lib/build &&
            cd md4c-lib/build &&
            cmake
            -DCMAKE_OSX_ARCHITECTURES="${{matrix.cmake-arch}}"
            -DCMAKE_INSTALL_NAME_DIR:PATH=/usr/local/lib
            -DCMAKE_BUILD_TYPE=Release .. &&
            cmake --build . --config Release &&
            cmake --install .
        with:
          output-dir: dist/
      - name: List build artifacts
        run: ls dist/
      - name: Save wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*

  pypi-upload:
    name: Upload packages to PyPI
    needs:
      - package-sdist-docs
      - package-wheels
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Set up Twine
        run: python -m pip install twine
      - name: Fetch all packages
        uses: actions/download-artifact@v3
        with:
          path: dist/
      - name: Flatten directory structure
        # Necessary because artifacts go in subfolders by job
        run: |
          for d in dist/*
          do
            mv "$d"/* dist/
            rmdir "$d"
          done
        shell: bash
      - name: List packages
        run: ls -l dist/
      - name: Publish packages
        env:
          TWINE_USERNAME: ${{secrets.PYPI_USERNAME}}
          TWINE_PASSWORD: ${{secrets.PYPI_PASSWORD}}
        run: |
          twine upload dist/*
